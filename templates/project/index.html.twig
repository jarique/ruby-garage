{% extends "base.html.twig" %}

{% block title %}Todo lists{% endblock %}

{% block body %}
    <div id="header">
        <input type="text" readonly class="form-control-plaintext" value="{{ user.username|e }}">

        <a href="{{ logout_path('main') }}" class="btn btn-primary">
            <span class="glyphicon glyphicon-log-out"></span> Logout
        </a>
    </div>

    <div id="content">
        <h2 class="font-weight-normal">SIMPLE TODO LISTS</h2>

        <h3 class="font-weight-normal">FROM RUBY GARAGE</h3>

        <div id="projects">
            {% for project in user.projects %}
                <div data-id="{{ project.id }}" class="project">
                    <div class="project-name">
                        <i class="fas fa-calendar-alt fa-lg"></i>
                        <p class="inline">{{ project.name|e }}</p>
                        <input class="form-control-sm hidden" type="text" data-target="input" placeholder="Update project...">
                        <i class="fas fa-plus-square fa-lg hidden" data-entity="project"></i>
                        <i class="fa fa-window-close fa-lg hidden"></i>
                        <i class="fas fa-trash-alt fa-lg" data-entity="project"></i>
                        <i class="fas fa-pencil-alt fa-lg"></i>
                    </div>
                    <div class="task-add input-group input-group-sm">
                        <i class="fas fa-plus fa-2x"></i>
                        <input class="form-control" type="text" placeholder="Create a task...">
                        <div class="input-group-append">
                            <span class="input-group-text">Add Task</span>
                        </div>
                    </div>
                    <div class="tasks sortable">
                        {% for task in project.tasks %}
                            <div data-id="{{ task.id }}" class="task">
                                {% if task.isStatusActive() %}
                                    <i class="fas fa-sort fa-lg"></i>
                                    <input data-toggle="popover"
                                           type="checkbox"
                                           data-original-title="Mark task as"
                                           data-content="<a href='#' id='{{ task.id }}' class='status-done'>Done</a>"
                                           data-html="true"
                                           data-placement="left">
                                    <p class="inline">{{ task.name|e }}</p>
                                    <input class="form-control-sm hidden" type="text" data-target="input" placeholder="Update task...">
                                    {% if task.deadline %}
                                        <input class="form-control-sm hidden"
                                           type="text"
                                           data-date="{{ task.deadline|date('Y-m-d') }}"
                                           data-target="picker{{ task.id }}"
                                           placeholder="Сhoose deadline...">
                                    {% else %}
                                        <input class="form-control-sm hidden"
                                           type="text"
                                           data-target="picker{{ task.id }}"
                                           placeholder="Сhoose deadline...">
                                    {% endif %}
                                    <i class="fas fa-plus-square fa-lg hidden" data-entity="task"></i>
                                    <i class="fa fa-window-close fa-lg hidden"></i>
                                    <i class="fas fa-trash-alt fa-lg" data-entity="task"></i>
                                    <i class="fas fa-pencil-alt fa-lg"></i>
                                {% else %}
                                    <i class="fas fa-sort fa-lg disabled"></i>
                                    <input data-toggle="popover" class="disabled" type="checkbox">
                                    <p class="inline disabled">{{ task.name|e }}</p>
                                    <i class="fas fa-trash-alt fa-lg" data-entity="task"></i>
                                    <i class="fas fa-pencil-alt fa-lg disabled"></i>
                                {% endif %}
                            </div>
                        {% endfor %}
                    </div>
                </div>
            {% endfor %}
        </div>

        <div class="text-centered">
            <button type="button" id="add-todo-list" class="btn btn-primary">
                <i class="fas fa-plus fa-2x"></i> Add TODO list
            </button>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(function(){
            // Sort Tasks
            $('.sortable').each(function(){
                var ids = [];
                $(this).children('.task').each(function(){
                    if($(this).children('.fa-sort').hasClass('disabled')){
                        ids.push($(this).attr('data-id'));
                    }
                });
                var cancelled = 'input';
                $.each(ids, function(index,value){
                    cancelled += ',.task[data-id="'+value+'"]';
                });
                $(this).sortable({
                    axis: 'y',
                    items: '.task',
                    cancel: cancelled,
                    update: function(event, ui){
                        var id = $(this).closest('.project').data('id');
                        var data = $(this).sortable('toArray', {attribute: 'data-id'}).join(',');
                        $.ajax({
                            url: '/task/reorder',
                            method: 'POST',
                            dataType: 'json',
                            data: {project_id: id, task_order: data},
                            error: function(jqXHR, textStatus, errorThrown){
                                alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                            }
                        });
                    }
                });
            });

            // Сhoose Deadline
            $('input[data-target^="picker"]').each(function(){
                $(this).datepicker({
                    dateFormat: 'yy-mm-dd'
                });
                var date = $(this).attr('data-date');
                if (typeof date !== typeof undefined && date !== false) {
                    $(this).datepicker('setDate', date);
                }
            });

            // Add Project
            $(document).on('click', '#add-todo-list', function(){
                $.ajax({
                    url: '/project/create',
                    method: 'GET',
                    dataType: 'json',
                    success: function(response){
                        var id = $(response).filter('.project').attr('data-id');
                        $("#projects").append(response);
                        $('.project[data-id="'+id+'"] .sortable').sortable({
                            axis: 'y',
                            items: '.task',
                            update: function(event, ui){
                                var id = $(this).closest('.project').data('id');
                                var data = $(this).sortable('toArray', {attribute: 'data-id'}).join(',');
                                $.ajax({
                                    url: '/task/reorder',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {project_id: id, task_order: data},
                                    error: function(jqXHR, textStatus, errorThrown){
                                        alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                                    }
                                });
                            }
                        });
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                        alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                    }
                });
            });

            // Add Task
            $(document).on('click', '.task-add span', function(){
                var id = $(this).closest('.project').data('id');
                var value = $(this).parent().prev().val();
                if(isNameValid(value)){
                    $.ajax({
                        url: '/task/create',
                        method: 'POST',
                        dataType: 'json',
                        data: {project_id: id, task_name: value},
                        async: false,
                        success: function(response){
                            var picker = $(response).find('input[data-target^="picker"]').attr('data-target');
                            $('.project[data-id="'+id+'"] .tasks').append(response);
                            $('input[data-target="'+picker+'"]').datepicker({
                                dateFormat: 'yy-mm-dd'
                            });
                        },
                        error: function(jqXHR, textStatus, errorThrown){
                            alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                        }
                    });
                    $(this).parent().prev().val('');
                }
            });

            // Delete Project or Task
            $(document).on('click', '.fa-trash-alt', function(){
                var entity = $(this).data('entity');
                var id = $(this).closest('.'+entity).data('id');
                $.ajax({
                    url: '/'+entity+'/delete/'+id,
                    method: 'GET',
                    dataType: 'json',
                    success: function(response){
                        $('.'+entity+'[data-id="'+id+'"]').remove();
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                        alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                    }
                });
            });

            // Update Project or Task
            $(document).on('click', '.fa-pencil-alt', function(){
                $(this).siblings('p').hide();
                $(this).hide();
                $(this).siblings('.hidden').show();
            });

            $(document).on('click', '.fa-window-close', function(){
                $(this).siblings('.hidden').hide();
                $(this).hide();
                $(this).siblings('p').show();
                $(this).siblings('.fa-pencil-alt').show();
            });

            $(document).on('click', '.fa-plus-square[data-entity="project"]', function(){
                var id = $(this).closest('.project').data('id');
                var value = $(this).siblings('input[data-target="input"]').val();
                var elem = $(this).siblings('p');
                if(isNameValid(value)){
                    $.ajax({
                        url: '/project/update',
                        method: 'POST',
                        dataType: 'json',
                        data: {project_id: id, project_name: value},
                        async: false,
                        success: function(response){
                            elem.text(value);
                        },
                        error: function(jqXHR, textStatus, errorThrown){
                            alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                        }
                    });
                    $(this).siblings('input[data-target="input"]').val('');
                    $(this).siblings('.hidden').hide();
                    $(this).hide();
                    $(this).siblings('p').show();
                    $(this).siblings('.fa-pencil-alt').show();
                }
            });

            $(document).on('click', '.fa-plus-square[data-entity="task"]', function(){
                var id = $(this).closest('.task').data('id');
                var value = $(this).siblings('input[data-target="input"]').val();
                var deadline = $(this).siblings('input[data-target^="picker"]').datepicker('getDate');
                var paragraph  = $(this).siblings('p');
                var input = $(this).siblings('input[data-target^="picker"]');
                var status = true; // Status Active
                if(!value && !deadline){
                    alert('Please enter a task name or a deadline!');
                    return;
                }
                if(value && !isNameValid(value)){
                    return;
                }
                if(deadline){
                    deadline = formatDate(deadline);
                    var today = formatDate(new Date);
                    if(deadline < today){
                        alert('Please enter a future deadline!');
                        return;
                    }
                }
                $.ajax({
                    url: '/task/update',
                    method: 'POST',
                    dataType: 'json',
                    data: {task_id: id, task_name: value, task_deadline: deadline},
                    async: false,
                    success: function(response){
                        if(response.status == 'inactive'){
                            status = false;
                        }else if(response.status == 'active'){
                            if(value){
                                paragraph.text(value);
                            }
                            if(deadline){
                                input.datepicker('setDate', deadline);
                            }
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                        alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                    }
                });
                $(this).siblings('.hidden').hide();
                $(this).hide();
                $(this).siblings('p').show();
                $(this).siblings('.fa-pencil-alt').show();
                if(status){
                    $(this).siblings('input[data-target="input"]').val('');
                }else{
                    $(this).siblings('input[data-toggle="popover"]').prop('checked', false).addClass('disabled');
                    $(this).siblings('p').addClass('disabled');
                    $(this).siblings('.fa-pencil-alt').addClass('disabled');
                    $(this).siblings('.fa-sort').addClass('disabled');
                    $(this).siblings('input[data-target="input"]').remove();
                    $(this).siblings('input[data-target^="picker"]').remove();
                    $(this).siblings('.fa-plus-square').remove();
                    $(this).siblings('.fa-window-close').remove();
                }
            });

            // Mark Task as 'Done'
            $(document).on('change', 'input[type="checkbox"]', function(){
                this.checked ? $(this).popover('show') : $(this).popover('hide');
            });

            $(document).on('click', '.status-done', function(){
                var id = $(this).attr('id');
                var elem = $('.task[data-id="'+id+'"]');
                $.ajax({
                    url: '/task/inactivate/'+id,
                    method: 'GET',
                    dataType: 'json',
                    async: false,
                    success: function(response){
                        elem.find('input[data-toggle="popover"]').prop('checked', false).addClass('disabled');
                        elem.find('p').addClass('disabled');
                        elem.find('.fa-pencil-alt').addClass('disabled');
                        elem.find('.fa-sort').addClass('disabled');
                        elem.find('input[data-target="input"]').remove();
                        elem.find('input[data-target^="picker"]').remove();
                        elem.find('.fa-plus-square').remove();
                        elem.find('.fa-window-close').remove();
                        elem.parent().sortable('option', 'cancel', '.task[data-id="'+id+'"]');
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                        alert(textStatus.charAt(0).toUpperCase()+textStatus.slice(1)+': '+errorThrown);
                    }
                });
                $(this).parents('.popover').addClass('hide').removeClass('show');
                elem.find('.hidden').hide();
                elem.find('p').show();
                elem.find('.fa-pencil-alt').show();
            });

            function formatDate(date){
                var year = String(date.getFullYear());
                var month = String(date.getMonth() + 1).padStart(2, '0');
                var day = String(date.getDate()).padStart(2, '0');
                return [year, month, day].join('-');
            }

            function isNameValid(name){
                if(name.trim() === ''){
                    alert('Please enter a name!');
                    return false;
                }
                if(!(/^[A-Za-z0-9_ -]+$/i.test(name)) || /<\/?[a-z][\s\S]*>/i.test(name)){
                    alert('Please enter a valid name!');
                    return false;
                }
                return true;
            }
        });
    </script>
{% endblock %}